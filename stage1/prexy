#!/usr/bin/env bash
set -euo pipefail
shopt -s failglob

DIR="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"

usage() {
    # NOTE: Don't forget to update OPTIONS/LONGOPTS/POS_MIN/POS_MAX below!
    cat <<EOF
Usage: $(basename "$0") [options] source

Positional Parameters:
    source                  Source C file to preprocess

Options:
    --header                Print prexy.h
    -o, --output PATH       Output file path
    -f, --formatter CMD     Formatter command (default: 'clang-format')
    -E, --expand            Run expand-preprocessor codegen
    -I, --include           Add include directory (used with -E)
    -h, --help              Display this help message.
    -v, --verbose           Enable debug messages
EOF
}

# NOTE: Use ':' suffix to specify opt has an arg
OPTIONS="o:f:EI:hv"
LONGOPTS="header,output:,formatter:,expand,include:,help,verbose"
POS_MIN=1
POS_MAX=1

if ! PARSED=$(getopt --options="$OPTIONS" --longoptions="$LONGOPTS" --name "$0" -- "$@"); then
    usage
    exit 2
fi

eval set -- "$PARSED"

print_header=
output=
formatter=clang-format
expand=
include_args=(".")
include_flags=()
verbose=

while true; do
    opt="$1"
    shift

    # NOTE: shift again if taking an arg

    case "$opt" in
    --header)
        print_header=1
        ;;
    -o | --output)
        output="$1"
        shift
        ;;
    -f | --formatter)
        formatter="$1"
        shift
        ;;
    -E | --expand)
        expand=1
        ;;
    -I | --include)
        include_args+=("$1")
        include_flags+=("-I$1")
        shift
        ;;
    -h | --help)
        usage
        exit 0
        ;;
    -v | --verbose)
        verbose=1
        ;;
    --)
        break
        ;;
    *)
        echo "Unknown option: $opt" >&2
        usage
        exit 2
        ;;
    esac
done

if [[ -n $print_header ]]; then
    cat "$DIR/../include/prexy.h"
    exit 0
fi

if [[ $# -lt $POS_MIN ]]; then
    echo "Missing argument" >&2
    usage
    exit 2
fi
if [[ $# -gt $POS_MAX ]]; then
    echo "Too many arguments" >&2
    usage
    exit 2
fi

source_path="$1"

if [[ ! -f $source_path ]]; then
    echo "File '$source_path' does not exist"
    exit 1
fi

debug() {
    if [[ -n $verbose ]]; then
        echo "$@" >&2
    fi
}

verbose() {
    if [[ -n $verbose ]]; then
        set -x
    fi
}

find_include() {
    for dir in "${include_args[@]}"; do
        if [[ -f "$dir/$1" ]]; then
            realpath "$dir/$1"
            return
        fi
    done

    echo "Could not find file: $1" >&2
    exit 3
}

find_expanded_includes() {
    local input
    input=$(find_include "$1")

    local includes
    mapfile -t includes < <(awk -f "$DIR/find_expand_includes.awk" "$input")
    for include in "${includes[@]}"; do
        find_expanded_includes "$include"
    done
    echo "$input"
}

uniq_unsorted() {
    awk '!seen[$0]++'
}

codegen() {
    verbose

    if [[ -n $expand ]]; then
        mapfile -t sources < <(find_expanded_includes "$source_path" | uniq_unsorted)

        for src in "${sources[@]}"; do
            awk -f "$DIR/unexpand.awk" "$src"
        done

        echo ""

        $CC -E -P "${include_flags[@]}" -DPREXY_EXPAND "$source_path"
    else
        debug "Formatting '$source_path'"
        awk -f "$DIR/prexy.awk" "$source_path"
    fi
}

if [[ -n $output ]]; then
    codegen | $formatter >"$output"
else
    codegen | $formatter
fi
